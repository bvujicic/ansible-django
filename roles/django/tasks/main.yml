---

- name: GIT | Clone "{{ project.repo.url }}" repository to {{ project.path }}
  become: true
  git:
    repo: "{{ project.repo.url }}"
    dest: "{{ project.path }}"
    accept_hostkey: true
    version: "{{ project.repo.branch }}"


- name: SYSTEM | Create local directories
  file:
    path: "{{ project.path }}{{ item }}"
    state: directory
  with_items:
    - log
    - media
    - config
  when: deploy is not defined

- name: SYSTEM | Set owner to '{{ host.user }}'
  file:
    dest: "{{ host.home }}"
    owner: "{{ host.user }}"
    group: "{{ host.user }}"
    recurse: true
  when: deploy is not defined


- name: ENV | Install requirements to "{{ project.env.path }}"
  become: true
  become_user: "{{ host.user }}"
  pip:
    virtualenv: "{{ project.env.path }}"
    virtualenv_python: "{{ python.version }}"
    requirements: "{{ project.reqs_path }}"
    extra_args: --exists-action=w
#    state: forcereinstall

- name: ENV | Activate environment
  shell: . {{ project.env.path }}bin/activate


- name: DJANGO | Copy YAML config file
  template:
    src: config.yml
    dest: "{{ project.path }}config/config.yml"


- name: DJANGO | Migrate the database
  become: true
  become_user: "{{ host.user }}"
  django_manage:
    virtualenv: "{{ project.env.path }}"
    app_path: "{{ project.path }}"
    command: migrate
  when: skip_database is not defined


- name: DJANGO | Collect static files
  become: true
  become_user: "{{ host.user }}"
  django_manage:
    virtualenv: "{{ project.env.path }}"
    app_path: "{{ project.path }}"
    command: collectstatic

#
#- name: SYSTEM | Set owner to '{{ host.user }}'
#  file:
#    dest: "{{ host.home }}"
#    owner: "{{ host.user }}"
#    group: "{{ host.user }}"
#    recurse: true